//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace new123.Models
{
    using System;
    using System.Collections.Generic;
    using MongoDB.Bson;
    using MongoDB.Driver;
    using Newtonsoft.Json;


    public partial class Survey
    {
        public int SurveyID { get; set; }
        public string SurveyName { get; set; }
        public string SupplierID { get; set; }
        public Nullable<int> CategoryID { get; set; }
        public Nullable<int> NumberOfQuestion { get; set; }
        public string SurveyJson { get; set; }
        public bool Discontinued { get; set; }
        public string json()
        {
            var _client = new MongoClient();
            var _database = _client.GetDatabase("surveys");
            var surveys = _database.GetCollection<Mgsurvey>("surveys");
            var list = surveys.Find(_ =>true).ToListAsync<Mgsurvey>().Result;
            var l = list.Find(_ => _.index == this.SurveyID);
            return l.jsonstr();
        }
        public void createMG()
        {
            var _client = new MongoClient();
            var _database = _client.GetDatabase("surveys");
            var surveys = _database.GetCollection<Mgsurvey>("surveys");
            var solutions = _database.GetCollection<MgSolution>("Solution");

            string newsurstring = "{\"index\":" + this.SurveyID.ToJson() + ", \"sname\": " + this.SurveyName.ToJson() + ", \"shortdescription\": \"\"" + ", \"pages\": [{page_title: \"untitle\", shortdescription: \"\", questions:[]}]}";
            string newsolstring = "{\"index\":" + this.SurveyID.ToJson() + ", \"responses\": []}";
            Mgsurvey newsur = JsonConvert.DeserializeObject<Mgsurvey>(newsurstring);
            MgSolution newsol = JsonConvert.DeserializeObject<MgSolution>(newsolstring);

            var updatesur = surveys.InsertOneAsync(newsur);
            var updatesol = solutions.InsertOneAsync(newsol);


        }
        public string SolutionJson()
        {
            var _client = new MongoClient();
            var _database = _client.GetDatabase("surveys");
            var solutions = _database.GetCollection<MgSolution>("Solution");
            var list = solutions.Find(_ => true).ToListAsync<MgSolution>().Result;
            var l = list.Find(_ => _.index == this.SurveyID);
            return l.jsonstr();
        }

        public void Updatejson(string json)
        {
            var _client = new MongoClient();
            var _database = _client.GetDatabase("surveys");
            var surveys = _database.GetCollection<Mgsurvey>("surveys");
            var list = surveys.Find(_ => true).ToListAsync<Mgsurvey>().Result;
            var l = list.Find(_ => _.index == this.SurveyID);

            Mgsurvey tempsur = JsonConvert.DeserializeObject<Mgsurvey>(json);
            tempsur._id = l._id;

            surveys.ReplaceOneAsync<Mgsurvey>(_ => _._id == l._id, tempsur);



        }
        public void SubmitResponseToDatabase(string json)
        {
            var _client = new MongoClient();
            var _database = _client.GetDatabase("surveys");
            var solutions = _database.GetCollection<MgSolution>("Solution");
            var list = solutions.Find(_ => true).ToListAsync<MgSolution>().Result;
            var l = list.Find(_ => _.index == this.SurveyID);
            response tempresponse = JsonConvert.DeserializeObject<response>(json);
            solutions.UpdateOneAsync<MgSolution>(_ => _._id == l._id, Builders<MgSolution>.Update.Push<response>(_=>_.responses, tempresponse));

        }

    }
}
